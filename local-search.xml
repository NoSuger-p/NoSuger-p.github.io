<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/08/%E5%8C%BA%E5%9D%97%E9%93%BE-End2End%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/05/08/%E5%8C%BA%E5%9D%97%E9%93%BE-End2End%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 style="text-align: center">华东师范大学数据科学与工程学院实验报告</h1><table><thead><tr><th>课程名称: 区块链与分享型数据库</th><th>年级: 20级</th><th>上机实践成绩：</th></tr></thead><tbody><tr><td>指导教师: 张召</td><td>姓名: 彭林航</td><td>学号: 10205501456</td></tr><tr><td>上机实践名称: End2End案例详解</td><td></td><td>上机实践日期: 2022.5.4</td></tr><tr><td>上机实验编号：</td><td>组号：</td><td>上机实践时间：</td></tr></tbody></table><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>​        本实验在实验 8 的基础上，详细介绍了 End2End 实例的系统结构、End2End 实例的源文档目录结构和文件调用关系以及 End2End 实例启动逻辑。还介绍了 peer 命令常用参数的含义，帮助读者理解手动调用智能合约的指令含义。通过阅读 End2End 案例中的智能合约，读者将了解用户交易的逻辑以及用 Go 编写智能合约的方法。</p><p>​        读者在完成本实验的基础上可以深入了解 End2End 实例的依赖包，如 Peer、Kafka、Zookeeper 等，也可以根据兴趣了解更多 Fabric 中的实例。</p><h3 id="二、实验任务"><a href="#二、实验任务" class="headerlink" title="二、实验任务"></a>二、实验任务</h3><p>​    (1) 理解 End2End 案例的启动逻辑</p><p>​    (2) 手动调用案例中的合约</p><p>​    (3) 理解 Fabric 中智能合约的逻辑</p><h3 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a>三、实验环境</h3><ul><li><p>JDK 17.0.2</p></li><li><p>git 2.25.1</p></li><li><p>docker 23.0.5</p></li><li><p>docker-compose 1.23.2</p></li><li><p>go 1.10.1</p></li><li><p>fabric 1.1.0</p></li></ul><h3 id="四、实验过程"><a href="#四、实验过程" class="headerlink" title="四、实验过程"></a>四、实验过程</h3><p>运行 End2End 案例后进入 cli 客户端</p><p><img src="pic1.jpg" alt="image-20230505135215042"></p><p>查询账户 a 的资产，可以看到账户 a 的资产为 90</p><p><img src="pic2.jpg" alt="image-20230505135520636"></p><p>查询账户 b 的资产，可以看到账户 b 的资产为 210</p><p><img src="pic3.jpg" alt="image-20230505135550541"></p><p>进行转账操作，账户 a 给账户 b 转账 50，可以看到提示转账成功</p><p><img src="pic4.jpg" alt="image-20230505140312165"></p><p>此时再查询账户 a 的资产，可以看到账户 a 的资产为 40</p><p><img src="pic5.jpg" alt="image-20230505140359412"></p><p>再查询账户 b 的资产，可以看到账户 b 的资产为 260</p><p><img src="pic6.jpg" alt="image-20230505140437764"></p><h3 id="五、习题"><a href="#五、习题" class="headerlink" title="五、习题"></a>五、习题</h3><p><strong>1. 解释下面命令中每个参数的含义</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">peer chaincode <span class="hljs-keyword">query</span> -C mychannel -n mycc -c &#x27;&#123;<span class="hljs-string">&quot;Args&quot;</span>:[<span class="hljs-string">&quot;query&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>]&#125;&#x27;<br></code></pre></td></tr></table></figure><p>答：包含有以下的参数：</p><ul><li><code>peer</code>：代表 peer 节点的命令，可以向节点发送命令以执行链码查询操作</li><li><code>chaincode</code>：执行的操作类型是链码操作</li><li><code>query</code>：执行的操作是查询操作</li><li><code>-C mychannel</code>：要查询的通道名称为 <code>mychannel</code>，这是包含了一组组织的区块链网络中的虚拟区域</li><li><code>-n mycc</code>：要查询的链码的名称为 <code>mycc</code>，即智能合约的名称。</li><li><code>-c &#39;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&#39;</code>：查询操作需要传递给链码的参数。包含 <code>Args</code> 键和两个元素的数组。这两个元素分别是智能合约中的查询函数名称 <code>query</code> 和传递给该函数的参数 <code>a</code> ，代表智能合约中所创建账户的 key 值。</li></ul><p><strong>2. 解释下面命令中每个参数的含义</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">peer chaincode invoke -o orderer.example.com:<span class="hljs-number">7050</span> --tls <span class="hljs-keyword">true</span> --cafile<br><span class="hljs-regexp">/opt/g</span>opath<span class="hljs-regexp">/src/gi</span>thub.com<span class="hljs-regexp">/hyperledger/</span>fabric<span class="hljs-regexp">/peer/</span>crypto<span class="hljs-regexp">/ordererOrganizations/</span>exam<br>ple.com<span class="hljs-regexp">/orderers/</span>orderer.example.com<span class="hljs-regexp">/msp/</span>tlscacerts/tlsca.example.com-cert.pem -C<br>mychannel -n mycc -c <span class="hljs-string">&#x27;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;50&quot;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>答：包含有以下的参数：</p><ul><li><code>peer</code>：代表 peer 节点的命令，可以向节点发送命令以执行链码查询操作</li><li><code>chaincode</code>：执行的操作类型是链码操作</li><li><code>invoke</code>：执行的操作是调用操作</li><li><code>-o orderer.example.com:7050</code>：指定 orderer 节点的地址和端口，用于向区块链网络提交事务</li><li><code>--tls true</code>：指定与 orderer 节点通信时启用 TLS 安全传输层协议</li><li><code>--cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</code>：指定用于验证 orderer 节点的 TLS 证书的 CA 文件路径</li><li><code>-C mychannel</code>：要查询的通道名称为 <code>mychannel</code>，这是包含了一组组织的区块链网络中的虚拟区域</li><li><code>-n mycc</code>：指定要调用的链码的名称为 <code>mycc</code>，即智能合约的名称</li><li><code>-c &#39;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;50&quot;]&#125;&#39;</code>：调用操作需要传递给链码的参数。包含 <code>Args</code> 键和四个元素的数组。这三个元素分别是智能合约中的调用函数名称 <code>invoke</code> 和传递给该函数的参数： <code>a</code> （转出账户）、<code>b</code> （转入账户）和 <code>50</code> （转账资产），即账户 <code>a</code>  将自己资产中50的资产转移到账户 <code>b</code> 的名下</li></ul><h3 id="六、实验总结"><a href="#六、实验总结" class="headerlink" title="六、实验总结"></a>六、实验总结</h3><p>​        通过本次上机实验，基于 e2e 案例，理解了其运行逻辑，通过手动调用案例中的智能合约 <code>ChainCode</code> ，学了到了其中指令的含义，理解了 Fabric 中智能合约的逻辑</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>云计算-Assignment 9.md</title>
    <link href="/2023/05/08/%E4%BA%91%E8%AE%A1%E7%AE%97-Assignment%209/"/>
    <url>/2023/05/08/%E4%BA%91%E8%AE%A1%E7%AE%97-Assignment%209/</url>
    
    <content type="html"><![CDATA[<h3 id="实验内容："><a href="#实验内容：" class="headerlink" title="实验内容："></a>实验内容：</h3><p>​        部署一个静态网页博客。静态网页博客是一种不需要后端服务器和数据库支持的网站，只需要使用 HTML、CSS 和 JavaScript 等前端技术就可以实现。静态网页博客有很多优点，比如速度快、安全稳定、易于维护等。</p><p>​        你需要选择一个自己感兴趣或擅长的主题来制作一个静态网页博客，比如个人介绍、爱好分享、技术总结等。你需要设计至少四个页面来展示博客内容，不限于首页、关于我、文章列表、文章详情等。</p><p>参考链接：<a href="https://blog.csdn.net/yaorongke/article/details/119089190">(GitHub Pages + Hexo搭建个人博客网站</a></p><p>以下是本次实验的总结与反思：</p><h3 id="博客主题及其选取原因"><a href="#博客主题及其选取原因" class="headerlink" title="博客主题及其选取原因"></a>博客主题及其选取原因</h3><p>采用 <code>Hexo</code> 来创建博客网站，<code>Hexo</code> 是一个基于<code>NodeJS</code>的静态博客网站生成器。选择的主题为 <code>Fluid</code>  主题，该主题为网站或应用程序提供流畅、现代、响应式的体验，选择该主题基于以下的优点：</p><ol><li>响应式设计：Fluid 主题能够适应不同尺寸的屏幕，包括桌面、平板电脑和移动设备，提供无缝的浏览体验</li><li>现代化：Fluid 主题的设计风格现代、时尚，使网站或应用程序看起来更加专业和高端</li><li>自适应：Fluid 主题具有自适应功能，可以根据用户的使用习惯和行为进行调整，提高用户体验</li><li>易于使用：Fluid 主题提供了一种直观的用户界面，使用户能够轻松浏览和使用网站或应用程序</li><li>可定制性：Fluid 主题提供了许多自定义选项，使用户可以根据自己的需求和喜好对网站或应用程序进行个性化定制</li><li>更好的性能：Fluid 主题采用了优化的代码和技术，可以提高网站或应用程序的性能和速度</li></ol><h3 id="博客页面布局及其设计思路"><a href="#博客页面布局及其设计思路" class="headerlink" title="博客页面布局及其设计思路"></a>博客页面布局及其设计思路</h3><p>Hexo 框架是一个基于 Node.js 的静态网站生成器，其页面布局和设计思路可以分为以下几个部分：</p><ul><li>主题布局</li></ul><p>Hexo 主题通常由一个主题布局文件和多个页面布局文件组成。主题布局文件定义了网站的整体框架和样式，而页面布局文件则定义了不同类型页面的结构和样式</p><ul><li>页面类型</li></ul><p>Hexo 支持多种页面类型，包括文章、页面、归档、标签、分类、搜索等。每种页面类型都有对应的布局文件</p><ul><li>模板语言</li></ul><p>Hexo 使用的是 EJS (Embedded JavaScript) 模板语言，允许将 HTML 和 JavaScript 结合起来，方便页面的生成和渲染</p><ul><li>层级结构</li></ul><p>Hexo 的页面布局采用了层级结构，每个页面都可以继承主题布局和其他页面布局，并可以根据需要添加自己的内容和样式</p><ul><li>模块化设计</li></ul><p>Hexo 主题的页面布局采用了模块化设计，允许将页面分成多个模块，每个模块负责不同的功能或样式，可以方便地进行组合和重用</p><h3 id="博客功能实现及其技术选择"><a href="#博客功能实现及其技术选择" class="headerlink" title="博客功能实现及其技术选择"></a>博客功能实现及其技术选择</h3><p>Hexo 框架可以实现以下的功能：</p><ol><li>文章列表和文章页面</li></ol><p>Hexo 通过 Markdown 格式的文章文件来存储博客内容，可以方便地创建文章列表和文章页面。对于文章列表，可以使用主题提供的列表页面模板；对于文章页面，可以使用主题提供的文章页面模板或自定义模板</p><ol start="2"><li>评论系统</li></ol><p>Hexo 可以使用第三方评论系统来实现评论功能，如 Disqus、Gitment 等。这些评论系统提供了评论框架和数据库存储，可以方便地嵌入到 Hexo 网站中。需要注意的是，这些评论系统需要将评论框架嵌入到 Hexo 主题的相应位置中</p><ol start="3"><li>分类和标签</li></ol><p>Hexo 提供了分类和标签的功能，可以使用主题提供的分类和标签页面模板或自定义模板。在文章文件头部添加分类和标签的信息即可实现分类和标签的功能。</p><ol start="4"><li>归档</li></ol><p>Hexo 的归档功能可以通过插件实现，如 hexo-generator-archive 插件。这个插件会生成一个归档页面，其中包含了按照时间排序的所有文章列表</p><ol start="5"><li>搜索</li></ol><p>Hexo 的搜索功能可以通过插件实现，如 hexo-generator-search 插件。这个插件会生成一个搜索页面，其中包含了搜索框和搜索结果列表</p><h3 id="博客样式设计及其美学考量"><a href="#博客样式设计及其美学考量" class="headerlink" title="博客样式设计及其美学考量"></a>博客样式设计及其美学考量</h3><p>在进行博客样式设计时需考虑以下的几个方面：</p><ol><li>颜色搭配</li></ol><p>选择合适的颜色搭配可以让网站更具吸引力，同时也能增强网站的整体视觉效果。需要注意的是，颜色的选择需要与博客主题和内容相匹配，不宜过于突兀或炫目</p><ol start="2"><li>字体和排版</li></ol><p>选择合适的字体和排版可以让博客更加易读和美观。需要注意的是，字体的选择应该具有一定的可读性和易读性，排版要合理，使得文章内容更容易被读者阅读和理解</p><ol start="3"><li>图片和配色</li></ol><p>图片和配色在博客样式设计中也占有重要的地位。合理的配色可以让图片更加鲜明，图片也能使得博客更加生动和有趣</p><ol start="4"><li>布局和空白</li></ol><p>布局和空白是博客样式设计中最基础的元素，一个好的布局可以让博客内容更加突出，一个合理的空白可以让读者更加舒适地阅读文章</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyFirstBlog</title>
    <link href="/2023/05/08/FirstBlog/"/>
    <url>/2023/05/08/FirstBlog/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2023/05/08/FirstBlog/test.png" class="" title="图片引用方法一"><p><img src="test.png" alt="图片引用方法二"></p><p><img src="/images/test.png" alt="图片引用方法三"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/08/hello-world/"/>
    <url>/2023/05/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
